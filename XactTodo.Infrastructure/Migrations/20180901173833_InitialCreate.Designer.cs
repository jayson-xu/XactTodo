// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using XactTodo.Infrastructure;

namespace XactTodo.Infrastructure.Migrations
{
    [DbContext(typeof(TodoContext))]
    [Migration("20180901173833_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.2-rtm-30932")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("XactTodo.Domain.AggregatesModel.MatterAggregate.Evolvement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comment")
                        .HasMaxLength(500);

                    b.Property<DateTime>("CreationTime")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("sysdate()");

                    b.Property<int>("CreatorUserId");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<int>("MatterId");

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("MatterId");

                    b.ToTable("Evolvement");
                });

            modelBuilder.Entity("XactTodo.Domain.AggregatesModel.MatterAggregate.Matter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Content")
                        .IsRequired();

                    b.Property<DateTime>("CreationTime")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("sysdate()");

                    b.Property<int>("CreatorUserId");

                    b.Property<DateTime?>("Deadline");

                    b.Property<int?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<int?>("ExecutantId");

                    b.Property<DateTime?>("FinishTime");

                    b.Property<bool>("Finished");

                    b.Property<int>("Importance");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<int?>("LastModifierUserId");

                    b.Property<string>("Password")
                        .HasMaxLength(128);

                    b.Property<bool>("Periodic");

                    b.Property<int?>("RelatedMatterId");

                    b.Property<string>("Remark")
                        .HasMaxLength(500);

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<int?>("TeamId");

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("Deadline");

                    b.HasIndex("Importance");

                    b.HasIndex("Subject");

                    b.HasIndex("TeamId");

                    b.ToTable("Matter");
                });

            modelBuilder.Entity("XactTodo.Domain.AggregatesModel.MatterTagAggregate.MatterTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("MatterId");

                    b.Property<string>("Tag")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("MatterId");

                    b.HasIndex("UserId");

                    b.ToTable("MatterTag");
                });

            modelBuilder.Entity("XactTodo.Domain.AggregatesModel.TeamAggregate.Member", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("sysdate()");

                    b.Property<int>("CreatorUserId");

                    b.Property<int?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<bool>("IsSupervisor");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<int?>("LastModifierUserId");

                    b.Property<int>("TeamId");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.HasIndex("UserId");

                    b.ToTable("Member");
                });

            modelBuilder.Entity("XactTodo.Domain.AggregatesModel.TeamAggregate.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("sysdate()");

                    b.Property<int>("CreatorUserId");

                    b.Property<int?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<int?>("LastModifierUserId");

                    b.Property<int>("LeaderId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("ProposedTags")
                        .HasMaxLength(500);

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("LeaderId");

                    b.ToTable("Team");
                });

            modelBuilder.Entity("XactTodo.Domain.AggregatesModel.UserAggregate.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("sysdate()");

                    b.Property<int?>("CreatorUserId");

                    b.Property<int?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<int?>("LastModifierUserId");

                    b.Property<string>("Password")
                        .HasMaxLength(128);

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("User");
                });

            modelBuilder.Entity("XactTodo.Domain.AggregatesModel.MatterAggregate.Evolvement", b =>
                {
                    b.HasOne("XactTodo.Domain.AggregatesModel.UserAggregate.User")
                        .WithMany()
                        .HasForeignKey("CreatorUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("XactTodo.Domain.AggregatesModel.MatterAggregate.Matter")
                        .WithMany("Evolvements")
                        .HasForeignKey("MatterId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("XactTodo.Domain.AggregatesModel.MatterAggregate.Matter", b =>
                {
                    b.HasOne("XactTodo.Domain.AggregatesModel.UserAggregate.User")
                        .WithMany()
                        .HasForeignKey("CreatorUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("XactTodo.Domain.AggregatesModel.TeamAggregate.Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.OwnsOne("XactTodo.Domain.AggregatesModel.MatterAggregate.PeriodOfTime", "EstimatedTimeRequired", b1 =>
                        {
                            b1.Property<int>("MatterId");

                            b1.Property<decimal>("Num");

                            b1.Property<int>("Unit");

                            b1.ToTable("Matter.EstimatedTimeRequired#PeriodOfTime");

                            b1.HasOne("XactTodo.Domain.AggregatesModel.MatterAggregate.Matter")
                                .WithOne("EstimatedTimeRequired")
                                .HasForeignKey("XactTodo.Domain.AggregatesModel.MatterAggregate.PeriodOfTime", "MatterId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("XactTodo.Domain.AggregatesModel.MatterAggregate.PeriodOfTime", "IntervalPeriod", b1 =>
                        {
                            b1.Property<int>("MatterId");

                            b1.Property<decimal>("Num");

                            b1.Property<int>("Unit");

                            b1.ToTable("Matter.IntervalPeriod#PeriodOfTime");

                            b1.HasOne("XactTodo.Domain.AggregatesModel.MatterAggregate.Matter")
                                .WithOne("IntervalPeriod")
                                .HasForeignKey("XactTodo.Domain.AggregatesModel.MatterAggregate.PeriodOfTime", "MatterId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("XactTodo.Domain.AggregatesModel.MatterTagAggregate.MatterTag", b =>
                {
                    b.HasOne("XactTodo.Domain.AggregatesModel.MatterAggregate.Matter")
                        .WithMany()
                        .HasForeignKey("MatterId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("XactTodo.Domain.AggregatesModel.UserAggregate.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("XactTodo.Domain.AggregatesModel.TeamAggregate.Member", b =>
                {
                    b.HasOne("XactTodo.Domain.AggregatesModel.TeamAggregate.Team")
                        .WithMany("Members")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("XactTodo.Domain.AggregatesModel.UserAggregate.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("XactTodo.Domain.AggregatesModel.TeamAggregate.Team", b =>
                {
                    b.HasOne("XactTodo.Domain.AggregatesModel.UserAggregate.User")
                        .WithMany()
                        .HasForeignKey("CreatorUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("XactTodo.Domain.AggregatesModel.UserAggregate.User")
                        .WithMany()
                        .HasForeignKey("LeaderId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("XactTodo.Domain.AggregatesModel.UserAggregate.User", b =>
                {
                    b.HasOne("XactTodo.Domain.AggregatesModel.UserAggregate.User")
                        .WithMany()
                        .HasForeignKey("CreatorUserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
